/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { generate } from '../src/index';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import { rmSync, mkdirSync } from 'fs';

describe('OpenAPI Generator', () => {
  const testOutputDir = join(__dirname, 'test-output');

  beforeEach(() => {
    // Clean up test output directory
    if (existsSync(testOutputDir)) {
      rmSync(testOutputDir, { recursive: true, force: true });
    }
    mkdirSync(testOutputDir, { recursive: true });
  });

  afterEach(() => {
    // Clean up after tests
    if (existsSync(testOutputDir)) {
      rmSync(testOutputDir, { recursive: true, force: true });
    }
  });

  it('should generate TypeScript code from demo OpenAPI spec', () => {
    const inputPath = join(__dirname, 'compensation-spec.json');

    expect(() => {
      generate(inputPath, testOutputDir);
    }).not.toThrow();

    // Check that files were generated
    expect(existsSync(join(testOutputDir, 'example/cart/types.ts'))).toBe(true);
    expect(existsSync(join(testOutputDir, 'cart/cartClient.ts'))).toBe(true);
    expect(existsSync(join(testOutputDir, 'wow/types.ts'))).toBe(true);
  });

  it('should generate correct schema interfaces', () => {
    const inputPath = join(__dirname, 'compensation-spec.json');
    generate(inputPath, testOutputDir);

    const cartTypesContent = readFileSync(
      join(testOutputDir, 'example/cart/types.ts'),
      'utf-8',
    );

    // Check that interfaces are generated
    expect(cartTypesContent).toContain('export interface CartData');
    expect(cartTypesContent).toContain('export interface AddCartItem');
    expect(cartTypesContent).toContain('export interface CartState');

    // Check that Wow types are imported when used
    expect(cartTypesContent).toContain(
      'import { Operator, Projection, FieldSort, Pagination } from "@ahoo-wang/fetcher-wow"',
    );

    // Check that Projection and FieldSort are imported
    expect(cartTypesContent).toContain('Projection');
    expect(cartTypesContent).toContain('FieldSort');
  });

  it('should generate correct client classes', () => {
    const inputPath = join(__dirname, 'compensation-spec.json');
    generate(inputPath, testOutputDir);

    const cartClientContent = readFileSync(
      join(testOutputDir, 'cart/cartClient.ts'),
      'utf-8',
    );

    // Check that class is generated with correct decorator
    expect(cartClientContent).toContain('@api(\'example.cart\')');
    expect(cartClientContent).toContain('export class CartClient');

    // Check that methods are generated
    expect(cartClientContent).toContain('view_cart(');
    expect(cartClientContent).toContain('add_cart_item(');

    // Check imports
    expect(cartClientContent).toContain(
      'import { api, get, post, put, del, patch, head, options, autoGeneratedError } from "@ahoo-wang/fetcher-decorator";',
    );
  });

  it('should handle Wow type mappings', () => {
    const inputPath = join(__dirname, 'compensation-spec.json');
    generate(inputPath, testOutputDir);

    const wowTypesContent = readFileSync(
      join(testOutputDir, 'wow/types.ts'),
      'utf-8',
    );

    // Check that Wow types are imported correctly
    expect(wowTypesContent).toContain('import { MessageHeaderSqlType } from "@ahoo-wang/fetcher-wow"');
  });

  it('should organize files according to schema naming conventions', () => {
    const inputPath = join(__dirname, 'compensation-spec.json');
    generate(inputPath, testOutputDir);

    // Check file organization
    expect(existsSync(join(testOutputDir, 'example/cart/types.ts'))).toBe(true);
    expect(existsSync(join(testOutputDir, 'example/order/types.ts'))).toBe(
      true,
    );
    expect(existsSync(join(testOutputDir, 'cart/cartClient.ts'))).toBe(true);
    expect(existsSync(join(testOutputDir, 'order/orderClient.ts'))).toBe(true);
  });

});
