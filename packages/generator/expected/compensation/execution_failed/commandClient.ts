/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import {
  type CommandRequest,
  type CommandResult,
  type CommandResultEventStream, type DeleteAggregate, type RecoverAggregate,
} from '@ahoo-wang/fetcher-wow';
import {
  api,
  type ApiMetadata,
  ApiMetadataCapable, attribute,
  autoGeneratedError, del, path,
  post, put,
  request,
} from '@ahoo-wang/fetcher-decorator';
import {
  ApplyExecutionFailed,
  ApplyExecutionSuccess, ApplyRetrySpec, ChangeFunction,
  CreateExecutionFailed,
  ForcePrepareCompensation, MarkRecoverable,
  PrepareCompensation,
} from './types.ts';
import { ContentTypeValues } from '@ahoo-wang/fetcher';
import { JsonEventStreamResultExtractor } from '@ahoo-wang/fetcher-eventstream';

export enum COMMAND_ENDPOINTS {
  CREATE_EXECUTION_FAILED = 'execution_failed/create_execution_failed',
  PREPARE_COMPENSATION = 'execution_failed/{id}/prepare_compensation',
  FORCE_PREPARE_COMPENSATION = 'execution_failed/{id}/force_prepare_compensation',
  APPLY_EXECUTION_SUCCESS = 'execution_failed/{id}/apply_execution_success',
  APPLY_EXECUTION_FAILED = 'execution_failed/{id}/apply_execution_failed',
  APPLY_RETRY_SPEC = 'execution_failed/{id}/apply_retry_spec',
  CHANGE_FUNCTION = 'execution_failed/{id}/change_function',
  MARK_RECOVERABLE = 'execution_failed/{id}/mark_recoverable',
  DELETE_AGGREGATE = 'execution_failed/{id}',
  RECOVER_AGGREGATE = 'execution_failed/{id}/recover',
}

@api()
export class ExecutionFailedCommandClient implements ApiMetadataCapable {
  constructor(public readonly apiMetadata: ApiMetadata) {

  }

  @post(COMMAND_ENDPOINTS.CREATE_EXECUTION_FAILED)
  createExecutionFailed(@request() commandRequest: CommandRequest<CreateExecutionFailed>,
                        @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest, attributes);
  }

  @put(COMMAND_ENDPOINTS.PREPARE_COMPENSATION)
  prepareCompensation(@path('id') id: string, @request() commandRequest: CommandRequest<PrepareCompensation>, @attribute() attributes?: Record<string, any>):
    Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put(COMMAND_ENDPOINTS.FORCE_PREPARE_COMPENSATION)
  forcePrepareCompensation(@path('id') id: string, @request() commandRequest: CommandRequest<ForcePrepareCompensation>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put(COMMAND_ENDPOINTS.APPLY_EXECUTION_SUCCESS)
  applyExecutionSuccess(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyExecutionSuccess>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put(COMMAND_ENDPOINTS.APPLY_EXECUTION_FAILED)
  applyExecutionFailed(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyExecutionFailed>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put(COMMAND_ENDPOINTS.APPLY_RETRY_SPEC)
  applyRetrySpec(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyRetrySpec>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put(COMMAND_ENDPOINTS.CHANGE_FUNCTION)
  changeFunction(@path('id') id: string, @request() commandRequest: CommandRequest<ChangeFunction>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/mark_recoverable')
  markRecoverable(@path('id') id: string, @request() commandRequest: CommandRequest<MarkRecoverable>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @del('{id}')
  deleteAggregate(@path('id') id: string, @request() commandRequest: CommandRequest<DeleteAggregate>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/recover')
  recoverAggregate(@path('id') id: string, @request() commandRequest: CommandRequest<RecoverAggregate>, @attribute() attributes?: Record<string, any>): Promise<CommandResult> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }
}

@api('', {
  headers: { Accept: ContentTypeValues.TEXT_EVENT_STREAM },
  resultExtractor: JsonEventStreamResultExtractor,
})
export class ExecutionFailedCommandStreamClient implements ApiMetadataCapable {
  constructor(public readonly apiMetadata: ApiMetadata = { basePath: 'execution_failed' }) {

  }

  @post('create_execution_failed')
  createExecutionFailed(@request() commandRequest: CommandRequest<CreateExecutionFailed>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(commandRequest, attributes);
  }

  @put('{id}/prepare_compensation')
  prepareCompensation(@request() commandRequest: CommandRequest<PrepareCompensation>, @attribute() attributes?: Record<string, any>):
    Promise<CommandResultEventStream> {
    throw autoGeneratedError(commandRequest, attributes);
  }

  @put('{id}/force_prepare_compensation')
  forcePrepareCompensation(@path('id') id: string, @request() commandRequest: CommandRequest<ForcePrepareCompensation>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/apply_execution_success')
  applyExecutionSuccess(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyExecutionSuccess>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/apply_execution_failed')
  applyExecutionFailed(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyExecutionFailed>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/apply_retry_spec')
  applyRetrySpec(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyRetrySpec>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/change_function')
  changeFunction(@path('id') id: string, @request() commandRequest: CommandRequest<ChangeFunction>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/mark_recoverable')
  markRecoverable(@path('id') id: string, @request() commandRequest: CommandRequest<MarkRecoverable>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @del('{id}')
  deleteAggregate(@path('id') id: string, @request() commandRequest: CommandRequest<DeleteAggregate>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }

  @put('{id}/recover')
  recoverAggregate(@path('id') id: string, @request() commandRequest: CommandRequest<RecoverAggregate>, @attribute() attributes?: Record<string, any>): Promise<CommandResultEventStream> {
    throw autoGeneratedError(id, commandRequest, attributes);
  }
}