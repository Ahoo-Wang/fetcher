/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  ClassDeclaration,
  OptionalKind,
  ParameterDeclarationStructure,
  Scope,
  SourceFile,
} from 'ts-morph';
import { addImport } from '../utils';

/**
 * The module specifier for the fetcher-decorator package.
 */
export const DECORATOR_MODULE_SPECIFIER = '@ahoo-wang/fetcher-decorator';

/**
 * Named imports from the fetcher-decorator package.
 */
export const DECORATOR_NAMED_IMPORTS = [
  'type ApiMetadata',
  'type ApiMetadataCapable',
  'type ParameterRequest',
  'api',
  'get',
  'post',
  'put',
  'patch',
  'del',
  'request',
  'attribute',
  'path',
  'autoGeneratedError',
];

export interface MethodReturnType {
  type: string;
  metadata?: string;
}

export const DEFAULT_RETURN_TYPE: MethodReturnType = {
  type: 'Promise<Response>',
  metadata: `{resultExtractor: ResultExtractors.Response }`,
};

export const STRING_RETURN_TYPE: MethodReturnType = {
  type: 'Promise<string>',
  metadata: `{resultExtractor: ResultExtractors.Text }`,
};


/**
 * Metadata configuration for stream result extraction.
 */
export const STREAM_RESULT_EXTRACTOR_METADATA = `{
  headers: { Accept: ContentTypeValues.TEXT_EVENT_STREAM },
  resultExtractor: JsonEventStreamResultExtractor,
}`;

/**
 * Adds the necessary imports for decorator functionality to the source file.
 *
 * @param sourceFile - The source file to add imports to
 *
 * @example
 * ```typescript
 * const sourceFile = project.createSourceFile('api.ts');
 * addImportDecorator(sourceFile);
 * ```
 */
export function addImportDecorator(sourceFile: SourceFile) {
  addImport(sourceFile, DECORATOR_MODULE_SPECIFIER, DECORATOR_NAMED_IMPORTS);
}

/**
 * Creates a new class declaration with the @api decorator.
 *
 * @param className - The name of the class to create
 * @param sourceFile - The source file to add the class to
 * @param apiArgs - Optional arguments for the @api decorator
 * @returns The created class declaration
 *
 * @example
 * ```typescript
 * const sourceFile = project.createSourceFile('UserApi.ts');
 * const classDecl = createDecoratorClass('UserApi', sourceFile, ['baseUrl']);
 * ```
 */
export function createDecoratorClass(
  className: string,
  sourceFile: SourceFile,
  apiArgs: string[] = [],
): ClassDeclaration {
  return sourceFile.addClass({
    name: className,
    isExported: true,
    decorators: [
      {
        name: 'api',
        arguments: apiArgs,
      },
    ],
  });
}

/**
 * Adds the ApiMetadataCapable interface implementation and constructor to a class declaration.
 *
 * @param classDeclaration - The class declaration to modify
 * @param initializer - Optional initializer for the apiMetadata parameter
 *
 * @example
 * ```typescript
 * const classDecl = createDecoratorClass('UserApi', sourceFile);
 * addApiMetadataCtor(classDecl, '{}');
 * ```
 */
export function addApiMetadataCtor(
  classDeclaration: ClassDeclaration,
  initializer?: string,
) {
  classDeclaration.addImplements('ApiMetadataCapable');
  classDeclaration.addConstructor({
    parameters: [
      {
        name: 'apiMetadata',
        type: 'ApiMetadata',
        hasQuestionToken: initializer === undefined,
        scope: Scope.Public,
        isReadonly: true,
        initializer: initializer,
      } as OptionalKind<ParameterDeclarationStructure>,
    ],
  });
}

export const EVENTSTREAM_MODULE_SPECIFIER = '@ahoo-wang/fetcher-eventstream';

export function addImportEventStream(sourceFile: SourceFile) {
  addImport(sourceFile, EVENTSTREAM_MODULE_SPECIFIER, ['JsonEventStreamResultExtractor', 'type JsonServerSentEventStream']);
}
