/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { ClassDeclaration, OptionalKind, ParameterDeclarationStructure, Scope, SourceFile } from 'ts-morph';
import { addImport } from '../utils';

export const DECORATOR_MODULE_SPECIFIER = '@ahoo-wang/fetcher-decorator';
export const DECORATOR_NAMED_IMPORTS = [
  'type ApiMetadata',
  'type ApiMetadataCapable',
  'api',
  'post',
  'put',
  'patch',
  'del',
  'request',
  'attribute',
  'path',
  'autoGeneratedError',
];

export const STREAM_RESULT_EXTRACTOR_METADATA = `{
  headers: { Accept: ContentTypeValues.TEXT_EVENT_STREAM },
  resultExtractor: JsonEventStreamResultExtractor,
}`;
export function addImportDecorator(sourceFile: SourceFile) {
  addImport(sourceFile, DECORATOR_MODULE_SPECIFIER, DECORATOR_NAMED_IMPORTS);
}

export function createDecoratorClass(className: string, sourceFile: SourceFile, apiArgs: string [] = []): ClassDeclaration {
  return sourceFile.addClass({
    name: className,
    isExported: true,
    decorators: [
      {
        name: 'api',
        arguments: apiArgs,
      },
    ],
  });
}

export function addApiMetadataCtor(classDeclaration: ClassDeclaration, initializer?: string) {
  classDeclaration.addImplements('ApiMetadataCapable');
  classDeclaration.addConstructor({
    parameters: [
      {
        name: 'apiMetadata',
        type: 'ApiMetadata',
        hasQuestionToken: initializer === undefined,
        scope: Scope.Public,
        isReadonly: true,
        initializer: initializer,
      } as OptionalKind<ParameterDeclarationStructure>,
    ],
  });
}