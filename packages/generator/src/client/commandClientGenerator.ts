/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { BaseCodeGenerator } from '../baseCodeGenerator';
import { GenerateContext } from '../types';
import {
  ClassDeclaration,
  DecoratorStructure,
  OptionalKind,
  Scope,
  SourceFile,
  VariableDeclarationKind,
} from 'ts-morph';
import { HTTPMethod } from '@ahoo-wang/fetcher-openapi';
import { AggregateDefinition, CommandDefinition } from '../aggregate';
import { createClientFilePath, getClientName } from './utils';
import { IMPORT_WOW_PATH, resolveModelInfo } from '../model';
import { addImport, addImportRefModel, camelCase } from '../utils';

/**
 * Generates TypeScript command client classes for aggregates.
 * Creates command clients that can send commands to aggregates.
 */
export class CommandClientGenerator extends BaseCodeGenerator {
  private readonly commandEndpointPathsName = 'COMMAND_ENDPOINT_PATHS';
  private readonly defaultCommandClientOptionsName =
    'DEFAULT_COMMAND_CLIENT_OPTIONS';

  /**
   * Creates a new CommandClientGenerator instance.
   * @param context - The generation context containing OpenAPI spec and project details
   */
  constructor(context: GenerateContext) {
    super(context);
  }

  /**
   * Generates command client classes for all aggregates.
   */
  generate(): void {
    for (const [, aggregates] of this.contextAggregates) {
      aggregates.forEach(aggregateDefinition => {
        this.processAggregate(aggregateDefinition);
      });
    }
  }

  /**
   * Processes and generates command client for an aggregate.
   * @param aggregate - The aggregate definition
   */
  processAggregate(aggregate: AggregateDefinition) {
    const commandClientFile = createClientFilePath(
      this.project,
      this.outputDir,
      aggregate.aggregate,
      'commandClient',
    );
    this.processCommandEndpointPaths(commandClientFile, aggregate);
    commandClientFile.addVariableStatement({
      declarationKind: VariableDeclarationKind.Const,
      declarations: [
        {
          name: this.defaultCommandClientOptionsName,
          type: 'ApiMetadata',
          initializer: `{
        basePath: '${aggregate.aggregate.contextAlias}'
      }`,
        },
      ],
      isExported: false,
    });
    commandClientFile.addImportDeclaration({
      moduleSpecifier: IMPORT_WOW_PATH,
      namedImports: [
        'CommandRequest',
        'CommandResult',
        'CommandResultEventStream',
        'DeleteAggregate',
        'RecoverAggregate',
      ],
      isTypeOnly: true,
    });
    commandClientFile.addImportDeclaration({
      moduleSpecifier: '@ahoo-wang/fetcher-eventstream',
      namedImports: ['JsonEventStreamResultExtractor'],
    });
    addImport(commandClientFile, '@ahoo-wang/fetcher', ['ContentTypeValues']);
    addImport(commandClientFile, '@ahoo-wang/fetcher-decorator', [
      'type ApiMetadata',
      'type ApiMetadataCapable',
      'api',
      'post',
      'put',
      'del',
      'request',
      'attribute',
      'path',
      'autoGeneratedError',
    ]);

    this.processCommandClient(commandClientFile, aggregate);
    this.processCommandClient(commandClientFile, aggregate, true);
  }

  processCommandEndpointPaths(
    clientFile: SourceFile,
    aggregateDefinition: AggregateDefinition,
  ) {
    const enumDeclaration = clientFile.addEnum({
      name: this.commandEndpointPathsName,
    });
    aggregateDefinition.commands.forEach(command => {
      enumDeclaration.addMember({
        name: command.name.toUpperCase(),
        initializer: `'${command.path}'`,
      });
    });
  }

  getEndpointPath(command: CommandDefinition): string {
    return `${this.commandEndpointPathsName}.${command.name.toUpperCase()}`;
  }

  processCommandClient(
    clientFile: SourceFile,
    aggregateDefinition: AggregateDefinition,
    isStream: boolean = false,
  ) {
    let suffix = 'CommandClient';
    let apiDecorator: OptionalKind<DecoratorStructure> = {
      name: 'api',
      arguments: [],
    };
    let returnType = `Promise<CommandResult>`;
    if (isStream) {
      suffix = 'Stream' + suffix;
      apiDecorator = {
        name: 'api',
        arguments: [
          `''`,
          `{
  headers: { Accept: ContentTypeValues.TEXT_EVENT_STREAM },
  resultExtractor: JsonEventStreamResultExtractor,
}`,
        ],
      };
      returnType = `Promise<CommandResultEventStream>`;
    }
    const commandClientName = getClientName(
      aggregateDefinition.aggregate,
      suffix,
    );

    const commandClient = clientFile.addClass({
      name: commandClientName,
      isExported: true,
      decorators: [apiDecorator],
      implements: ['ApiMetadataCapable'],
    });
    commandClient.addConstructor({
      parameters: [
        {
          name: 'apiMetadata',
          type: 'ApiMetadata',
          scope: Scope.Public,
          isReadonly: true,
          initializer: `${this.defaultCommandClientOptionsName}`,
        },
      ],
    });
    aggregateDefinition.commands.forEach(command => {
      this.processCommandMethod(clientFile, commandClient, command, returnType);
    });
  }

  private methodToDecorator(method: HTTPMethod): string {
    if (method === 'delete') {
      return 'del';
    }
    return method;
  }

  /**
   * Processes and generates a command method for the command client.
   * @param sourceFile - The source file containing the client
   * @param client - The client class declaration
   * @param definition - The command definition
   */
  processCommandMethod(
    sourceFile: SourceFile,
    client: ClassDeclaration,
    definition: CommandDefinition,
    returnType: string,
  ) {
    const commandModelInfo = resolveModelInfo(definition.schema.key);
    addImportRefModel(sourceFile, this.outputDir, commandModelInfo);
    const parameters = definition.pathParameters.map(parameter => {
      return {
        name: parameter.name,
        type: 'string',
        decorators: [
          {
            name: 'path',
            arguments: [`'${parameter.name}'`],
          },
        ],
      };
    });
    parameters.push({
      name: 'commandRequest',
      type: `CommandRequest<${commandModelInfo.name}>`,
      decorators: [
        {
          name: 'request',
          arguments: [],
        },
      ],
    });
    parameters.push({
      name: 'attributes',
      type: 'Record<string, any>',
      decorators: [
        {
          name: 'attribute',
          arguments: [],
        },
      ],
    });
    client.addMethod({
      name: camelCase(definition.name),
      decorators: [
        {
          name: this.methodToDecorator(definition.method),
          arguments: [`${this.getEndpointPath(definition)}`],
        },
      ],
      parameters: parameters,
      returnType: returnType,
      statements: [
        `throw autoGeneratedError(${parameters.map(parameter => parameter.name).join(',')});`,
      ],
    });
  }
}
