/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  api,
  ApiMetadata,
  ApiMetadataCapable,
  attribute,
  autoGeneratedError,
  get,
  path,
} from '@ahoo-wang/fetcher-decorator';

export class LoadOwnerStateAggregateEndpointPaths {
  static readonly LOAD = 'state';
  static readonly LOAD_VERSIONED = `${LoadOwnerStateAggregateEndpointPaths.LOAD}/{version}`;
  static readonly LOAD_TIME_BASED = `${LoadOwnerStateAggregateEndpointPaths.LOAD}/time/{createTime}`;
}

@api()
export class LoadOwnerStateAggregateClient<S> implements ApiMetadataCapable {
  constructor(public readonly apiMetadata?: ApiMetadata) {
  }

  @get(LoadOwnerStateAggregateEndpointPaths.LOAD)
  load(@attribute() attributes?: Record<string, any>): Promise<S> {
    throw autoGeneratedError(attributes);
  }

  @get(LoadOwnerStateAggregateEndpointPaths.LOAD_VERSIONED)
  loadVersioned(@path('version') version: number, @attribute() attributes?: Record<string, any>): Promise<S> {
    throw autoGeneratedError(version, attributes);
  }

  @get(LoadOwnerStateAggregateEndpointPaths.LOAD_TIME_BASED)
  loadTimeBased(@path('createTime') createTime: number, @attribute() attributes?: Record<string, any>): Promise<S> {
    throw autoGeneratedError(createTime, attributes);
  }

}