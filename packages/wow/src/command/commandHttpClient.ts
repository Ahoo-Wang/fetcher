/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { ContentTypeValues, Fetcher } from '@ahoo-wang/fetcher';
import { CommandResult, CommandResultEventStream } from './commandResult';
import { api, autoGeneratedError, endpoint, request, ResultExtractors } from '@ahoo-wang/fetcher-decorator';
import { CommandHttpRequest } from './commandHttpRequest';

/**
 * HTTP client for sending commands to the Wow framework.
 *
 * This client provides methods to send commands and receive results either
 * synchronously or as a stream of events. It uses the fetcher-decorator
 * library to handle HTTP communication with appropriate headers and
 * result extraction.
 */
@api()
export class CommandHttpClient {
  /**
   * Creates a new CommandHttpClient instance.
   *
   * @param fetcher - The Fetcher instance to use for HTTP requests
   */
  constructor(public readonly fetcher: Fetcher) {
  }

  /**
   * Sends a command and waits for the result.
   *
   * @param commandHttpRequest - The command HTTP request to send
   * @returns A promise that resolves to the command result
   */
  @endpoint()
  send(@request() commandHttpRequest: CommandHttpRequest): Promise<CommandResult> {
    throw autoGeneratedError(commandHttpRequest);
  }

  /**
   * Sends a command and returns a stream of results as events.
   *
   * This method sets the Accept header to text/event-stream to receive
   * Server-Sent Events, and uses a JSON event stream result extractor
   * to parse the response.
   *
   * @param commandHttpRequest - The command HTTP request to send
   * @returns A promise that resolves to a stream of command results
   */
  @endpoint(undefined, undefined, {
    headers: {
      Accept: ContentTypeValues.TEXT_EVENT_STREAM,
    },
    resultExtractor: ResultExtractors.JsonEventStream,
  })
  async sendAndWaitStream(@request() commandHttpRequest: CommandHttpRequest): Promise<CommandResultEventStream> {
    throw autoGeneratedError(commandHttpRequest);
  }
}