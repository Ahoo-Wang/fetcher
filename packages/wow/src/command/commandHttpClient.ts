/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { ContentTypeValues, Fetcher } from '@ahoo-wang/fetcher';
import { CommandResult, CommandResultEventStream } from './commandResult';
import {
  api,
  autoGeneratedError,
  endpoint,
  request,
  ResultExtractors,
} from '@ahoo-wang/fetcher-decorator';
import { CommandHttpRequest } from './commandHttpRequest';

/**
 * HTTP client for sending commands to the Wow framework.
 *
 * This client provides methods to send commands and receive results either
 * synchronously or as a stream of events. It uses the fetcher-decorator
 * library to handle HTTP communication with appropriate headers and
 * result extraction.
 *
 * @example
 * ```typescript
 * // Create a fetcher instance with base configuration
 * const wowFetcher = new Fetcher({
 *   baseURL: 'http://localhost:8080/',
 * });
 *
 * // Add EventStreamInterceptor to handle Server-Sent Events
 * wowFetcher.interceptors.response.use(new EventStreamInterceptor());
 *
 * // Create CommandHttpClient instance
 * const commandHttpClient = new CommandHttpClient(wowFetcher);
 *
 * // Define a command
 * const command: CommandHttpRequest = {
 *   path: 'owner/{ownerId}/cart/add_cart_item',
 *   method: HttpMethod.POST,
 *   headers: {
 *     [CommandHeaders.WAIT_STAGE]: CommandStage.SNAPSHOT,
 *   },
 *   urlParams: {
 *     path: {
 *       ownerId: 'ownerId',
 *     },
 *   },
 *   body: {
 *     productId: 'productId',
 *     quantity: 1,
 *   },
 * };
 *
 * // Send command and wait for result
 * const commandResult = await commandHttpClient.send(command);
 *
 * // Send command and receive result as stream
 * const commandResultStream = await commandHttpClient.sendAndWaitStream(command);
 * for await (const commandResultEvent of commandResultStream) {
 *   console.log('Received:', commandResultEvent.data);
 * }
 * ```
 */
@api()
export class CommandHttpClient {
  /**
   * Creates a new CommandHttpClient instance.
   *
   * @param fetcher - The Fetcher instance to use for HTTP requests
   */
  constructor(public readonly fetcher: Fetcher) {
  }

  /**
   * Sends a command and waits for the result.
   *
   * This method sends a command to the Wow framework and waits for the processing
   * to complete before returning the result. The command is sent as an HTTP request
   * with the specified path, method, headers, and body.
   *
   * @param commandHttpRequest - The command HTTP request to send
   * @returns A promise that resolves to the command result
   *
   * @example
   * ```typescript
   * const command: CommandHttpRequest = {
   *   path: 'owner/{ownerId}/cart/add_cart_item',
   *   method: HttpMethod.POST,
   *   headers: {
   *     [CommandHeaders.WAIT_STAGE]: CommandStage.SNAPSHOT,
   *   },
   *   urlParams: {
   *     path: {
   *       ownerId: 'ownerId',
   *     },
   *   },
   *   body: {
   *     productId: 'productId',
   *     quantity: 1,
   *   },
   * };
   *
   * const result = await commandHttpClient.send(command);
   * console.log('Command result:', result);
   * ```
   */
  @endpoint()
  send(
    @request() commandHttpRequest: CommandHttpRequest,
  ): Promise<CommandResult> {
    throw autoGeneratedError(commandHttpRequest);
  }

  /**
   * Sends a command and returns a stream of results as events.
   *
   * This method sets the Accept header to text/event-stream to receive
   * Server-Sent Events, and uses a JSON event stream result extractor
   * to parse the response. It's useful for long-running commands where
   * you want to receive progress updates or multiple results.
   *
   * @param commandHttpRequest - The command HTTP request to send
   * @returns A promise that resolves to a stream of command results
   *
   * @example
   * ```typescript
   * const command: CommandHttpRequest = {
   *   path: 'owner/{ownerId}/cart/add_cart_item',
   *   method: HttpMethod.POST,
   *   headers: {
   *     [CommandHeaders.WAIT_STAGE]: CommandStage.SNAPSHOT,
   *   },
   *   urlParams: {
   *     path: {
   *       ownerId: 'ownerId',
   *     },
   *   },
   *   body: {
   *     productId: 'productId',
   *     quantity: 1,
   *   },
   * };
   *
   * const stream = await commandHttpClient.sendAndWaitStream(command);
   * for await (const event of stream) {
   *   console.log('Command result event:', event.data);
   * }
   * ```
   */
  @endpoint(undefined, undefined, {
    headers: {
      Accept: ContentTypeValues.TEXT_EVENT_STREAM,
    },
    resultExtractor: ResultExtractors.JsonEventStream,
  })
  async sendAndWaitStream(
    @request() commandHttpRequest: CommandHttpRequest,
  ): Promise<CommandResultEventStream> {
    throw autoGeneratedError(commandHttpRequest);
  }
}
