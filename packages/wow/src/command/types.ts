/*
 * Copyright [2021-present] [ahoo wang <ahoowang@qq.com> (https://github.com/Ahoo-Wang)].
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Command identifier interface
 *
 * Represents the unique identifier for a command.
 */
export interface CommandId {
  commandId: string;
}

/**
 * Wait command identifier capable interface
 *
 * Represents the identifier of the command being waited for.
 */
export interface WaitCommandIdCapable {
  waitCommandId: string;
}

/**
 * Request identifier interface
 *
 * Represents the unique identifier for a request, used for idempotency control.
 */
export interface RequestId {
  requestId: string;
}

/**
 * Command execution stage enum
 *
 * Represents the different stages of command execution lifecycle.
 */
export enum CommandStage {
  /**
   * When the command is published to the command bus/queue, a completion signal is generated.
   */
  SENT = 'SENT',

  /**
   * When the command is processed by the aggregate root, a completion signal is generated.
   */
  PROCESSED = 'PROCESSED',

  /**
   * When the snapshot is generated, a completion signal is generated.
   */
  SNAPSHOT = 'SNAPSHOT',

  /**
   * When the events generated by the command are *projected*, a completion signal is generated.
   */
  PROJECTED = 'PROJECTED',

  /**
   * When the events generated by the command are processed by *event handlers*, a completion signal is generated.
   */
  EVENT_HANDLED = 'EVENT_HANDLED',

  /**
   * When the events generated by the command are processed by *Saga*, a completion signal is generated.
   */
  SAGA_HANDLED = 'SAGA_HANDLED',
}

/**
 * Command stage capable interface
 *
 * Represents an object that has a command execution stage.
 */
export interface CommandStageCapable {
  stage: CommandStage;
}

/**
 * Command result capable interface
 *
 * Represents an object that contains command execution results.
 */
export interface CommandResultCapable {
  result: Record<string, any>;
}

/**
 * Signal time capable interface
 *
 * Represents an object that has a signal time (timestamp).
 */
export interface SignalTimeCapable {
  signalTime: number;
}

/**
 * Nullable aggregate version capable interface
 *
 * Represents an object that may have an aggregate version for optimistic concurrency control.
 */
export interface NullableAggregateVersionCapable {
  /**
   * The aggregate version of the aggregate.
   */
  aggregateVersion?: number;
}
