import { describe, it, expect } from 'vitest';
import { AutoGenerated, autoGeneratedError } from '../src';

describe('generated', () => {
  describe('AutoGenerated', () => {
    it('should create an AutoGenerated error instance with correct properties', () => {
      const error = new AutoGenerated();

      expect(error).toBeInstanceOf(AutoGenerated);
      expect(error).toBeInstanceOf(Error);
      expect(error.name).toBe('AutoGenerated');
      expect(error.message).toBe(
        'Implementation will be generated automatically.',
      );
    });
  });

  describe('autoGeneratedError', () => {
    it('should create an AutoGenerated error instance', () => {
      const error = autoGeneratedError();

      expect(error).toBeInstanceOf(AutoGenerated);
      expect(error).toBeInstanceOf(Error);
      expect(error.name).toBe('AutoGenerated');
      expect(error.message).toBe(
        'Implementation will be generated automatically.',
      );
    });

    it('should accept any number of arguments but ignore them', () => {
      const error1 = autoGeneratedError('test');
      const error2 = autoGeneratedError(1, 2, 3);
      const error3 = autoGeneratedError({ key: 'value' }, ['array']);

      expect(error1).toBeInstanceOf(AutoGenerated);
      expect(error2).toBeInstanceOf(AutoGenerated);
      expect(error3).toBeInstanceOf(AutoGenerated);

      expect(error1.message).toBe(
        'Implementation will be generated automatically.',
      );
      expect(error2.message).toBe(
        'Implementation will be generated automatically.',
      );
      expect(error3.message).toBe(
        'Implementation will be generated automatically.',
      );
    });

    it('should be used to prevent ESLint no-unused-vars errors', () => {
      // This test demonstrates the intended usage of autoGeneratedError
      // to prevent ESLint no-unused-vars errors in method signatures that will be auto-generated

      // Simulate a method that will be auto-generated
      function exampleMethod(user: string, options: object) {
        // In real usage, this would prevent ESLint errors for unused parameters
        throw autoGeneratedError(user, options);
      }

      expect(exampleMethod).toThrow(AutoGenerated);
      expect(exampleMethod).toThrow(
        'Implementation will be generated automatically.',
      );
    });
  });
});
