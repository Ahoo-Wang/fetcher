import { HeadersCapable, HttpMethod, TimeoutCapable } from '@ahoo-wang/fetcher';

/**
 * Metadata for class-level API configuration
 *
 */
export interface ApiMetadata extends TimeoutCapable, HeadersCapable {
  /**
   * Base path for all endpoints in the class
   */
  basePath?: string;

  /**
   * Default headers for all requests in the class
   */
  headers?: Record<string, string>;

  /**
   * Default timeout for all requests in the class
   */
  timeout?: number;

  /**
   * Name of the fetcher instance to use,default: default .
   * FetcherRegistrar
   */
  fetcher?: string;
}

/**
 * Metadata for HTTP endpoints
 */
export interface EndpointMetadata extends ApiMetadata {
  /**
   * HTTP method for the endpoint
   */
  method: HttpMethod;

  /**
   * Path for the endpoint (relative to class base path)
   */
  path?: string;
}

/**
 * Parameter types for decorator parameters
 */
export enum ParameterType {
  PATH = 'path',
  QUERY = 'query',
  HEADER = 'header',
  BODY = 'body',
}

/**
 * Metadata for method parameters
 */
export interface ParameterMetadata {
  /**
   * Type of parameter (path, query, header, body)
   */
  type: ParameterType;

  /**
   * Name of the parameter (used for path, query, and header parameters)
   */
  name?: string;

  /**
   * Index of the parameter in the method signature
   */
  index: number;
}

// Symbols for storing metadata
export const API_METADATA_KEY = Symbol('api:metadata');
export const ENDPOINT_METADATA_KEY = Symbol('endpoint:metadata');
export const PARAMETER_METADATA_KEY = Symbol('parameter:metadata');

/**
 * example:
 * ```
 *     @post()
 *     createUser(@body() user: User):Promise<Response> {
 *         throw autoGeneratedError();
 *     }
 * ```
 */
export const autoGeneratedError = () => {
  return new Error('Implementation will be generated automatically.');
};