import { HttpMethod } from '@ahoo-wang/fetcher';
import { ApiMetadata } from './apiDecorator';
import 'reflect-metadata';
import { ResultExtractor, ResultExtractorCapable } from './resultExtractor';

export interface PathCapable {
  /**
   * Path for the endpoint (relative to class base path).
   *
   * This path will be appended to the class's base path to form the complete URL.
   * Path parameters can be specified using curly braces, e.g., '/users/{id}'
   */
  path?: string;
}

/**
 * Metadata for HTTP endpoints.
 *
 * Defines the configuration options for individual HTTP endpoints (methods).
 * These settings will override any corresponding class-level settings from ApiMetadata.
 */
export interface EndpointMetadata extends ApiMetadata, ResultExtractorCapable, PathCapable {
  /**
   * HTTP method for the endpoint.
   *
   * Specifies the HTTP verb to be used for this endpoint (GET, POST, PUT, DELETE, etc.)
   */
  method?: HttpMethod;
}

export const ENDPOINT_METADATA_KEY = Symbol('endpoint:metadata');

export type MethodEndpointMetadata = Omit<EndpointMetadata, 'method' | 'path'>;

/**
 * Decorator factory for defining HTTP endpoints.
 *
 * Creates a decorator that can be used to define HTTP endpoints
 * on class methods. It stores metadata about the endpoint that will be used
 * to generate the actual HTTP request.
 *
 * @param method - The HTTP method for this endpoint
 * @param path - The path for this endpoint (relative to class base path)
 * @param metadata - Additional endpoint metadata (headers, timeout, etc.)
 * @returns A method decorator function
 *
 * @example
 * ```typescript
 * @api('/api/v1')
 * class UserService {
 *   @endpoint(HttpMethod.GET, '/users/{id}')
 *   getUser(@path('id') id: string): Promise<Response> {
 *     // Implementation will be generated automatically
 *     throw autoGeneratedError();
 *   }
 * }
 * ```
 */
export function endpoint(
  method?: HttpMethod,
  path?: string,
  metadata: MethodEndpointMetadata = {},
) {
  return function(target: object, propertyKey: string | symbol): void {
    // Store metadata directly on the method
    const endpointMetadata = {
      method: method,
      path,
      ...metadata,
    };
    Reflect.defineMetadata(
      ENDPOINT_METADATA_KEY,
      endpointMetadata,
      target,
      propertyKey,
    );
  };
}

export function get(path: string = '', metadata: MethodEndpointMetadata = {}) {
  return endpoint(HttpMethod.GET, path, metadata);
}

export function post(path: string = '', metadata: MethodEndpointMetadata = {}) {
  return endpoint(HttpMethod.POST, path, metadata);
}

export function put(path: string = '', metadata: MethodEndpointMetadata = {}) {
  return endpoint(HttpMethod.PUT, path, metadata);
}

export function del(path: string = '', metadata: MethodEndpointMetadata = {}) {
  return endpoint(HttpMethod.DELETE, path, metadata);
}

export function patch(
  path: string = '',
  metadata: MethodEndpointMetadata = {},
) {
  return endpoint(HttpMethod.PATCH, path, metadata);
}

export function head(path: string = '', metadata: MethodEndpointMetadata = {}) {
  return endpoint(HttpMethod.HEAD, path, metadata);
}

export function options(
  path: string = '',
  metadata: MethodEndpointMetadata = {},
) {
  return endpoint(HttpMethod.OPTIONS, path, metadata);
}
