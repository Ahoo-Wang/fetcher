import {
  api,
  get,
  post,
  put,
  del,
  autoGeneratedError,
  body,
  path,
  request,
} from '@ahoo-wang/fetcher-decorator';
import type {
  BatchResult, CommandRequest,
  CommandResult,
  Condition, DeleteAggregate,
  ListQuery,
  PagedQuery, RecoverAggregate,
} from '@ahoo-wang/fetcher-wow';
import type {
  ApplyExecutionFailed,
  ApplyExecutionSuccess, ApplyRetrySpec, ChangeFunction,
  CreateExecutionFailed,
  ExecutionFailedAggregatedDomainEventStream, ExecutionFailedAggregatedDomainEventStreamPagedList,
  ExecutionFailedAggregatedListQuery, ExecutionFailedAggregatedPagedQuery, ExecutionFailedAggregatedSingleQuery,
  ExecutionFailedState,
  ExecutionFailedStateMaterializedSnapshot, ExecutionFailedStateMaterializedSnapshotPagedList,
  ExecutionFailedStatePagedList,
  ExecutionFailedStateStateEvent, ForcePrepareCompensation, MarkRecoverable, PrepareCompensation,
} from './types.ts';

@api()
export class ExecutionFailedClient {
  @post('/execution_failed/create_execution_failed')
  createExecutionFailed(@request() commandRequest: CommandRequest<CreateExecutionFailed>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/prepare_compensation')
  prepareCompensation(@request() commandRequest: CommandRequest<PrepareCompensation>):
    Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/force_prepare_compensation')
  forcePrepareCompensation(@request() commandRequest: CommandRequest<ForcePrepareCompensation>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/apply_execution_success')
  applyExecutionSuccess(@request() commandRequest: CommandRequest<ApplyExecutionSuccess>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/apply_execution_failed')
  applyExecutionFailed(@request() commandRequest: CommandRequest<ApplyExecutionFailed>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/apply_retry_spec')
  applyRetrySpec(@request() commandRequest: CommandRequest<ApplyRetrySpec>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/change_function')
  changeFunction(@request() commandRequest: CommandRequest<ChangeFunction>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/mark_recoverable')
  markRecoverable(@request() commandRequest: CommandRequest<MarkRecoverable>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @del('/execution_failed/{id}')
  deleteAggregate(@request() commandRequest: CommandRequest<DeleteAggregate>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @put('/execution_failed/{id}/recover')
  recoverAggregate(@request() commandRequest: CommandRequest<RecoverAggregate>): Promise<CommandResult> {
    throw autoGeneratedError(commandRequest);
  }

  @get('/execution_failed/{id}/state/tracing')
  aggregateTracingGet(@path('id') id: string): Promise<ExecutionFailedStateStateEvent[]> {
    throw autoGeneratedError(id);
  }

  @get('/execution_failed/{id}/state')
  aggregateLoad(@path('id') id: string): Promise<ExecutionFailedState> {
    throw autoGeneratedError(id);
  }

  @get('/execution_failed/{id}/state/{version}')
  versionedAggregateLoad(@path('id') id: string, @path('version') version: number): Promise<ExecutionFailedState> {
    throw autoGeneratedError(id, version);
  }

  @get('/execution_failed/{id}/state/time/{createTime}')
  timeBasedAggregateLoad(@path('id') id: string, @path('createTime') createTime: number): Promise<ExecutionFailedState> {
    throw autoGeneratedError(id, createTime);
  }

  @get('/execution_failed/{id}/snapshot')
  snapshotLoad(@path('id') id: string): Promise<ExecutionFailedStateMaterializedSnapshot> {
    throw autoGeneratedError(id);
  }

  @put('/execution_failed/{id}/snapshot')
  snapshotRegenerate(@path('id') id: string): Promise<never> {
    throw autoGeneratedError(id);
  }

  @put('/execution_failed/snapshot/{afterId}/{limit}')
  snapshotBatchRegenerate(@path('afterId') afterId: string, @path('limit') limit: number): Promise<BatchResult> {
    throw autoGeneratedError(afterId, limit);
  }

  @post('/execution_failed/snapshot/count')
  snapshotCount(): Promise<number> {
    throw autoGeneratedError();
  }

  @post('/execution_failed/snapshot/list')
  snapshotListQuery(@body() query: ExecutionFailedAggregatedListQuery): Promise<ExecutionFailedStateMaterializedSnapshot[]> {
    throw autoGeneratedError(query);
  }

  @post('/execution_failed/snapshot/list/state')
  snapshot_state_list_query(@body() query: ExecutionFailedAggregatedListQuery): Promise<ExecutionFailedState[]> {
    throw autoGeneratedError(query);
  }

  @post('/execution_failed/snapshot/paged')
  snapshotPagedQuery(@body() query: ExecutionFailedAggregatedPagedQuery): Promise<ExecutionFailedStateMaterializedSnapshotPagedList> {
    throw autoGeneratedError(query);
  }

  @post('/execution_failed/snapshot/paged/state')
  snapshotStatePagedQuery(@body() query: ExecutionFailedAggregatedPagedQuery): Promise<ExecutionFailedStatePagedList> {
    throw autoGeneratedError(query);
  }

  @post('/execution_failed/snapshot/single')
  snapshotSingle(@body() query: ExecutionFailedAggregatedSingleQuery): Promise<ExecutionFailedStateMaterializedSnapshot> {
    throw autoGeneratedError(query);
  }

  @post('/execution_failed/snapshot/single/state')
  snapshotStateSingle(@body() query: ExecutionFailedAggregatedSingleQuery): Promise<ExecutionFailedState> {
    throw autoGeneratedError(query);
  }

  @get('/execution_failed/{id}/event/{headVersion}/{tailVersion}')
  eventStreamLoad(@path('id') id: string, @path('headVersion') headVersion: number, @path('tailVersion') tailVersion: number): Promise<ExecutionFailedAggregatedDomainEventStream[]> {
    throw autoGeneratedError(id, headVersion, tailVersion);
  }

  @post('/execution_failed/event/list')
  eventListQuery(@body() query: ListQuery): Promise<ExecutionFailedAggregatedDomainEventStream[]> {
    throw autoGeneratedError(query);
  }

  @post('/execution_failed/event/paged')
  eventPagedQuery(@body() query: PagedQuery): Promise<ExecutionFailedAggregatedDomainEventStreamPagedList> {
    throw autoGeneratedError(query);
  }

  @post('/execution_failed/event/count')
  eventCount(@body() query: Condition): Promise<number> {
    throw autoGeneratedError(query);
  }

  @put('/execution_failed/{id}/{version}/compensate')
  compensate(@path('id') id: string, @path('version') version: number): Promise<number> {
    throw autoGeneratedError(id, version);
  }

  @post('/execution_failed/state/{afterId}/{limit}')
  stateEventResend(@path('afterId') afterId: string, @path('limit') limit: number): Promise<BatchResult> {
    throw autoGeneratedError(afterId, limit);
  }
}

