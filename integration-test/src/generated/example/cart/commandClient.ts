import { ContentTypeValues } from "@ahoo-wang/fetcher";
import { type ApiMetadata, type ApiMetadataCapable, api, attribute, autoGeneratedError, del, path, post, put, request } from "@ahoo-wang/fetcher-decorator";
import { JsonEventStreamResultExtractor } from "@ahoo-wang/fetcher-eventstream";
import type { CommandRequest, CommandResult, CommandResultEventStream, DeleteAggregate, RecoverAggregate } from "@ahoo-wang/fetcher-wow";
import { AddCartItem, ChangeQuantity, MockVariableCommand, MountedCommand, RemoveCartItem, ViewCart } from "./types";

export enum CartCommandEndpointPaths {
    ADD_CART_ITEM = '/owner/{ownerId}/cart/add_cart_item',
    CHANGE_QUANTITY = '/owner/{ownerId}/cart/change_quantity',
    DEFAULT_DELETE_AGGREGATE = '/owner/{ownerId}/cart',
    DEFAULT_RECOVER_AGGREGATE = '/owner/{ownerId}/cart/recover',
    MOCK_VARIABLE_COMMAND = '/tenant/{tenantId}/owner/{ownerId}/cart/{id}/{customerId}/{mockEnum}',
    MOUNTED_COMMAND = '/owner/{ownerId}/cart/mounted_command',
    REMOVE_CART_ITEM = '/owner/{ownerId}/cart/remove_cart_item',
    VIEW_CART = '/owner/{ownerId}/cart/view_cart'
}

const DEFAULT_COMMAND_CLIENT_OPTIONS: ApiMetadata = {
    basePath: 'example'
};

@api()
export class CartCommandClient<R = CommandResult> implements ApiMetadataCapable {
    constructor(public readonly apiMetadata: ApiMetadata = DEFAULT_COMMAND_CLIENT_OPTIONS) {
    }

    /**
     * 加入购物车
     * 加入购物车
     * - operationId: `example.cart.add_cart_item`
     * - path: `/owner/{ownerId}/cart/add_cart_item`
     */
    @post(CartCommandEndpointPaths.ADD_CART_ITEM)
    addCartItem(@request() commandRequest: CommandRequest<AddCartItem>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * 变更购买数量
     * - operationId: `example.cart.change_quantity`
     * - path: `/owner/{ownerId}/cart/change_quantity`
     */
    @put(CartCommandEndpointPaths.CHANGE_QUANTITY)
    changeQuantity(@request() commandRequest: CommandRequest<ChangeQuantity>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * Delete aggregate
     * - operationId: `example.cart.default_delete_aggregate`
     * - path: `/owner/{ownerId}/cart`
     */
    @del(CartCommandEndpointPaths.DEFAULT_DELETE_AGGREGATE)
    defaultDeleteAggregate(@request() commandRequest?: CommandRequest<DeleteAggregate>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * Recover deleted aggregate
     * - operationId: `example.cart.default_recover_aggregate`
     * - path: `/owner/{ownerId}/cart/recover`
     */
    @put(CartCommandEndpointPaths.DEFAULT_RECOVER_AGGREGATE)
    defaultRecoverAggregate(@request() commandRequest?: CommandRequest<RecoverAggregate>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * mock_variable_command
     * - operationId: `example.cart.mock_variable_command`
     * - path: `/tenant/{tenantId}/owner/{ownerId}/cart/{id}/{customerId}/{mockEnum}`
     */
    @post(CartCommandEndpointPaths.MOCK_VARIABLE_COMMAND)
    mockVariableCommand(@path('customerId') customerId: number, @path('id') id: string, @path('mockEnum') mockEnum: string, @request() commandRequest?: CommandRequest<MockVariableCommand>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(customerId, id, mockEnum, commandRequest, attributes);
    }

    /**
     * 挂载的命令
     * - operationId: `example.cart.mounted_command`
     * - path: `/owner/{ownerId}/cart/mounted_command`
     */
    @put(CartCommandEndpointPaths.MOUNTED_COMMAND)
    mountedCommand(@request() commandRequest?: CommandRequest<MountedCommand>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * 删除商品
     * - operationId: `example.cart.remove_cart_item`
     * - path: `/owner/{ownerId}/cart/remove_cart_item`
     */
    @put(CartCommandEndpointPaths.REMOVE_CART_ITEM)
    removeCartItem(@request() commandRequest: CommandRequest<RemoveCartItem>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * view_cart
     * - operationId: `example.cart.view_cart`
     * - path: `/owner/{ownerId}/cart/view_cart`
     */
    @put(CartCommandEndpointPaths.VIEW_CART)
    viewCart(@request() commandRequest?: CommandRequest<ViewCart>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }
}

@api('', {
    headers: { Accept: ContentTypeValues.TEXT_EVENT_STREAM },
    resultExtractor: JsonEventStreamResultExtractor,
})
export class CartStreamCommandClient extends CartCommandClient<CommandResultEventStream> {
    constructor(apiMetadata: ApiMetadata = DEFAULT_COMMAND_CLIENT_OPTIONS) {
        super(apiMetadata);
    }
}
