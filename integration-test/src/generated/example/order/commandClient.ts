import { ContentTypeValues } from "@ahoo-wang/fetcher";
import { type ApiMetadata, type ApiMetadataCapable, api, attribute, autoGeneratedError, del, patch, path, post, put, request } from "@ahoo-wang/fetcher-decorator";
import { JsonEventStreamResultExtractor } from "@ahoo-wang/fetcher-eventstream";
import type { CommandRequest, CommandResult, CommandResultEventStream, DeleteAggregate, RecoverAggregate } from "@ahoo-wang/fetcher-wow";
import { ChangeAddress, CreateOrder, PayOrder, ReceiptOrder, ShipOrder } from "./types";

export enum OrderCommandEndpointPaths {
    CHANGE_ADDRESS = '/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}/address',
    CREATE_ORDER = '/tenant/{tenantId}/owner/{ownerId}/sales-order',
    DEFAULT_DELETE_AGGREGATE = '/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}',
    DEFAULT_RECOVER_AGGREGATE = '/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}/recover',
    PAY_ORDER = '/tenant/{tenantId}/sales-order/{id}/pay',
    RECEIPT_ORDER = '/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}/package',
    SHIP_ORDER = '/tenant/{tenantId}/sales-order/{id}/package'
}

const DEFAULT_COMMAND_CLIENT_OPTIONS: ApiMetadata = {
    basePath: 'example'
};

@api()
export class OrderCommandClient<R = CommandResult> implements ApiMetadataCapable {
    constructor(public readonly apiMetadata: ApiMetadata = DEFAULT_COMMAND_CLIENT_OPTIONS) {
    }

    /**
     * 修改收货地址
     * - operationId: `example.order.change_address`
     * - path: `/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}/address`
     */
    @put(OrderCommandEndpointPaths.CHANGE_ADDRESS)
    changeAddress(@path('id') id: string, @request() commandRequest: CommandRequest<ChangeAddress>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * 下单
     * - operationId: `example.order.create_order`
     * - path: `/tenant/{tenantId}/owner/{ownerId}/sales-order`
     */
    @post(OrderCommandEndpointPaths.CREATE_ORDER)
    createOrder(@request() commandRequest: CommandRequest<CreateOrder>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * Delete aggregate
     * - operationId: `example.order.default_delete_aggregate`
     * - path: `/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}`
     */
    @del(OrderCommandEndpointPaths.DEFAULT_DELETE_AGGREGATE)
    defaultDeleteAggregate(@path('id') id: string, @request() commandRequest?: CommandRequest<DeleteAggregate>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * Recover deleted aggregate
     * - operationId: `example.order.default_recover_aggregate`
     * - path: `/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}/recover`
     */
    @put(OrderCommandEndpointPaths.DEFAULT_RECOVER_AGGREGATE)
    defaultRecoverAggregate(@path('id') id: string, @request() commandRequest?: CommandRequest<RecoverAggregate>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * pay_order
     * - operationId: `example.order.pay_order`
     * - path: `/tenant/{tenantId}/sales-order/{id}/pay`
     */
    @post(OrderCommandEndpointPaths.PAY_ORDER)
    payOrder(@path('id') id: string, @request() commandRequest: CommandRequest<PayOrder>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * 收货
     * - operationId: `example.order.receipt_order`
     * - path: `/tenant/{tenantId}/owner/{ownerId}/sales-order/{id}/package`
     */
    @patch(OrderCommandEndpointPaths.RECEIPT_ORDER)
    receiptOrder(@path('id') id: string, @request() commandRequest?: CommandRequest<ReceiptOrder>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * 发货
     * - operationId: `example.order.ship_order`
     * - path: `/tenant/{tenantId}/sales-order/{id}/package`
     */
    @post(OrderCommandEndpointPaths.SHIP_ORDER)
    shipOrder(@path('id') id: string, @request() commandRequest?: CommandRequest<ShipOrder>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }
}

@api('', {
    headers: { Accept: ContentTypeValues.TEXT_EVENT_STREAM },
    resultExtractor: JsonEventStreamResultExtractor,
})
export class OrderStreamCommandClient extends OrderCommandClient<CommandResultEventStream> {
    constructor(apiMetadata: ApiMetadata = DEFAULT_COMMAND_CLIENT_OPTIONS) {
        super(apiMetadata);
    }
}
